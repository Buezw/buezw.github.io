<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Learning Programming with C on Buezwqwg</title><link>https://buezw.github.io/docs/uoft/24/learning-programming-with-c/</link><description>Recent content in Learning Programming with C on Buezwqwg</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>youremail@example.com (Buezwqwg)</managingEditor><webMaster>youremail@example.com (Buezwqwg)</webMaster><copyright>© 2025 Buezwqwg</copyright><lastBuildDate>Mon, 31 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://buezw.github.io/docs/uoft/24/learning-programming-with-c/index.xml" rel="self" type="application/rss+xml"/><item><title>LPC 11. Recursion</title><link>https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc11.recursion/</link><pubDate>Mon, 31 Mar 2025 00:00:00 +0000</pubDate><author>youremail@example.com (Buezwqwg)</author><guid>https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc11.recursion/</guid><description>&lt;blockquote>
&lt;p>Last Edit: 3/31/25&lt;/p>
&lt;/blockquote>
&lt;h1 class="relative group">11.1 Recursive Functions by Definition
&lt;div id="111-recursive-functions-by-definition" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#111-recursive-functions-by-definition" aria-label="Anchor">#&lt;/a>
&lt;/span>
&lt;/h1>
&lt;ul>
&lt;li>Recursion 递归是一个先解决更小问题实例，后解决整体问题的方法&lt;/li>
&lt;li>Recursion 这一次特指函数调用自身&lt;/li>
&lt;li>Recursion 包含饿了 End Case 和 Loop Case，分别代表了循环条件和终止条件，二者缺一不可&lt;/li>
&lt;/ul>
&lt;h2 class="relative group">11.1.1 Euclidean Algorithm for GCD
&lt;div id="1111-euclidean-algorithm-for-gcd" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#1111-euclidean-algorithm-for-gcd" aria-label="Anchor">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;ul>
&lt;li>Euclidean Algorithm 是一种用于求两个整数最大公约数的方法，这个方法是递归定义的&lt;/li>
&lt;li>该算法的核心为，如果 a 和 b 是两个正整数且 $a &amp;gt; b$，则 a 和 b 的最大公约数等于 $a - b$ 和 b 的 GCD&lt;/li>
&lt;/ul>
&lt;p>$$
\text{GCD}(a, b) =\begin{cases}\text{GCD}(b, a - b) &amp;amp; \text{if } a &amp;gt; b \\text{GCD}(b, a) &amp;amp; \text{if } a &amp;lt; b \a &amp;amp; \text{if } a = b\end{cases}
$$&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc11.recursion/feature.png"/></item><item><title>LPC 12. Data Structure</title><link>https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc12.datastructure/</link><pubDate>Mon, 31 Mar 2025 00:00:00 +0000</pubDate><author>youremail@example.com (Buezwqwg)</author><guid>https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc12.datastructure/</guid><description>&lt;blockquote>
&lt;p>Last Edit: 3/31/25&lt;/p>
&lt;/blockquote>
&lt;p>Data Structure，即一种储存数据的方式，不同的结构会有不同的性能优势和劣势，即被运用到不同的工作上&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc12.datastructure/feature.png"/></item><item><title>LPC 10. Strings</title><link>https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc10.strings/</link><pubDate>Thu, 27 Mar 2025 00:00:00 +0000</pubDate><author>youremail@example.com (Buezwqwg)</author><guid>https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc10.strings/</guid><description>&lt;blockquote>
&lt;p>Last Edit: 25/3/27&lt;/p>
&lt;/blockquote>
&lt;p>Throughout this book, we study different data types. None of the data types discussed before stores a word or sentence, because in C programming language there is no data type that stores a word/sentence.&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc10.strings/feature.png"/></item><item><title>LPC 9. Multi-dimensional Arrays</title><link>https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc9.multi-dimensionalarrays/</link><pubDate>Tue, 25 Mar 2025 00:00:00 +0000</pubDate><author>youremail@example.com (Buezwqwg)</author><guid>https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc9.multi-dimensionalarrays/</guid><description>&lt;blockquote>
&lt;p>Last Edit: 3/25/25&lt;/p>
&lt;/blockquote>
&lt;p>在之前介绍了 Array 的使用，但那些都是对于 One-Dimensional Arrays 的，但是引入 Multi-Dimension 也非常重要&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc9.multi-dimensionalarrays/feature.png"/></item><item><title>LPC 8. Dynamic Memory Allocation</title><link>https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc8.dynamicmemoryallocation/</link><pubDate>Fri, 07 Mar 2025 00:00:00 +0000</pubDate><author>youremail@example.com (Buezwqwg)</author><guid>https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc8.dynamicmemoryallocation/</guid><description>&lt;blockquote>
&lt;p>Last Edit: 3/7/25&lt;/p>
&lt;/blockquote>
&lt;p>前面提到过了 Array 中的 Memory 的分配方式是固定的连续内存，而想要修改 Array 的大小则变得困难，这时候就需要通过 Dynamic Memory Allocation 来动态的分布内存&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc8.dynamicmemoryallocation/feature.png"/></item><item><title>LPC 7. Arrays</title><link>https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc7.arrays/</link><pubDate>Sat, 22 Feb 2025 00:00:00 +0000</pubDate><author>youremail@example.com (Buezwqwg)</author><guid>https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc7.arrays/</guid><description>&lt;blockquote>
&lt;p>Last Edit: 2/22/25&lt;/p>
&lt;/blockquote>
&lt;p>很多情况下，需要连续处理多个值，而分别给他们赋值则显得特别麻烦，于是就需要一种更加高效的数据结构&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc7.arrays/feature.png"/></item><item><title>LPC 6. Pointers</title><link>https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc6.pointers/</link><pubDate>Thu, 20 Feb 2025 00:00:00 +0000</pubDate><author>youremail@example.com (Buezwqwg)</author><guid>https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc6.pointers/</guid><description>&lt;blockquote>
&lt;p>Last Edit: 2/20/25&lt;/p>
&lt;/blockquote>
&lt;p>上一章中提到的所有有关于 Function 的内容都是关于一个函数的输入以及输出的，本章将讨论如何在不同函数间访问 Variables&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc6.pointers/feature.png"/></item><item><title>LPC 5. Functions</title><link>https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc5.functions/</link><pubDate>Tue, 28 Jan 2025 00:00:00 +0000</pubDate><author>youremail@example.com (Buezwqwg)</author><guid>https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc5.functions/</guid><description>&lt;blockquote>
&lt;p>Last Edit: 1/28/25&lt;/p>
&lt;/blockquote>
&lt;h1 class="relative group">5.1 Functions
&lt;div id="51-functions" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#51-functions" aria-label="Anchor">#&lt;/a>
&lt;/span>
&lt;/h1>
&lt;p>Function是用来执行特定任务的可重复调用恶的代码块，通过Modular Programming将复杂问题分解&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc5.functions/feature.png"/></item><item><title>LPC 4. Repetition</title><link>https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc4.repetition/</link><pubDate>Mon, 20 Jan 2025 00:00:00 +0000</pubDate><author>youremail@example.com (Buezwqwg)</author><guid>https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc4.repetition/</guid><description>&lt;blockquote>
&lt;p>Last Edit: 1/20/25&lt;/p>
&lt;/blockquote>
&lt;p>Loops帮助程序节省空间，提高编写效率并减少错误，常见的Loop存在两种，while loop和for loop&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc4.repetition/feature.png"/></item><item><title>LPC 3. Decision Making Statements</title><link>https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc3.decisionmakingstatements/</link><pubDate>Mon, 13 Jan 2025 00:00:00 +0000</pubDate><author>youremail@example.com (Buezwqwg)</author><guid>https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc3.decisionmakingstatements/</guid><description>&lt;blockquote>
&lt;p>Last Edit: 1/13/25&lt;/p>
&lt;/blockquote>
&lt;p> In this chapter, we will discuss how to make decisions in C. We will discuss the &lt;code>if&lt;/code>, &lt;code>else&lt;/code> and &lt;code>else if&lt;/code> statements&lt;/p>
&lt;h1 class="relative group">3.1 If-Statement
&lt;div id="31-if-statement" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#31-if-statement" aria-label="Anchor">#&lt;/a>
&lt;/span>
&lt;/h1>
&lt;ul>
&lt;li>开发一个提示用户输入年龄的程序。如果未满工作的法定年龄，程序会打印“您还没有资格工作”，否则会显示“您有资格工作”&lt;/li>
&lt;li>&lt;code>if&lt;/code>和&lt;code>else&lt;/code>的语法在C中如下&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">condition&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// code to execute if condition is true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// code to execute if condition is false
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 class="relative group">3.1.1 What can this condition be
&lt;div id="311-what-can-this-condition-be" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#311-what-can-this-condition-be" aria-label="Anchor">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;ul>
&lt;li>Condition是一个Bool variable，其可以用&lt;code>True&lt;/code>表示，也可以用Numerical Value。在C中，任意非零的值都（通常用1）代表了&lt;code>True&lt;/code>，而&lt;code>False&lt;/code>则是0&lt;/li>
&lt;/ul>
&lt;h3 class="relative group">Relational Expression
&lt;div id="relational-expression" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#relational-expression" aria-label="Anchor">#&lt;/a>
&lt;/span>
&lt;/h3>
&lt;ul>
&lt;li>关系运算符通常使用以下的符号&lt;/li>
&lt;li>&lt;code>==&lt;/code>：Equal to&lt;/li>
&lt;li>&lt;code>!=&lt;/code>：Not Equal to&lt;/li>
&lt;li>&lt;code>&amp;lt;&lt;/code>：Less than&lt;/li>
&lt;li>&lt;code>&amp;gt;&lt;/code>：Greater than&lt;/li>
&lt;li>&lt;code>&amp;lt;=&lt;/code>：Leq&lt;/li>
&lt;li>&lt;code>&amp;gt;=&lt;/code>：Geq&lt;/li>
&lt;li>有了这些就可以完整编写一个判断年龄的程序了&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Enter your age: &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">age&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">14&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// Condition
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">checking&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">age&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">less&lt;/span> &lt;span class="n">than&lt;/span> &lt;span class="mi">14&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;You are not yet &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">eligible&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">work&lt;/span> &lt;span class="n">in&lt;/span> &lt;span class="n">Ontario&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="s">&amp;#34;);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;You are eligible to &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">work&lt;/span> &lt;span class="n">in&lt;/span> &lt;span class="n">Ontario&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="s">&amp;#34;);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 class="relative group">3.1.2. What can we do with relational operators?
&lt;div id="312what-can-we-do-with-relational-operators" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#312what-can-we-do-with-relational-operators" aria-label="Anchor">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;ul>
&lt;li>通过Relational Operators，可以实现&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>比较值的大小：&lt;code>(7.2&amp;gt;5.1)&lt;/code>&lt;/li>
&lt;li>比较&lt;code>char&lt;/code>的大小：&lt;code>'a'&amp;gt;'b'&lt;/code>，这里比较的是他们的ASCII&lt;/li>
&lt;li>比较&lt;code>char&lt;/code>和&lt;code>int&lt;/code>：比如&lt;code>(0 == '0')&lt;/code>，char的0有ASCII = 48，所以0 != &amp;lsquo;0&amp;rsquo;&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;True&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>这是一个判断，他最终会输出True，这是因为即使第一行赋值&lt;code>int x = 0;&lt;/code>，第二行重新令&lt;code>x = 1&lt;/code>，使得判断变成了&lt;code>if (1)&lt;/code>，而1就是True&lt;/li>
&lt;/ul>
&lt;h1 class="relative group">3.2 Multiple Conditions
&lt;div id="32-multiple-conditions" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#32-multiple-conditions" aria-label="Anchor">#&lt;/a>
&lt;/span>
&lt;/h1>
&lt;ul>
&lt;li>想要同时判断两个Condition的成立，可以通过&lt;code>&amp;amp;&amp;amp;&lt;/code>的判断符，这些完整的叫做Logical Operators&lt;/li>
&lt;/ul>
&lt;h2 class="relative group">3.2.1 Logical/Boolean Operators
&lt;div id="321-logicalboolean-operators" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#321-logicalboolean-operators" aria-label="Anchor">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">A&lt;/th>
&lt;th style="text-align: left">B&lt;/th>
&lt;th style="text-align: left">A &amp;amp;&amp;amp; B&lt;/th>
&lt;th style="text-align: left">A || B&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">false&lt;/td>
&lt;td style="text-align: left">false&lt;/td>
&lt;td style="text-align: left">false&lt;/td>
&lt;td style="text-align: left">false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">false&lt;/td>
&lt;td style="text-align: left">true&lt;/td>
&lt;td style="text-align: left">false&lt;/td>
&lt;td style="text-align: left">true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">true&lt;/td>
&lt;td style="text-align: left">false&lt;/td>
&lt;td style="text-align: left">false&lt;/td>
&lt;td style="text-align: left">true&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">true&lt;/td>
&lt;td style="text-align: left">true&lt;/td>
&lt;td style="text-align: left">true&lt;/td>
&lt;td style="text-align: left">true&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>完整的Logical Opeators的判断结果如上，但是记住过程比背下表格更加简单&lt;/li>
&lt;li>&lt;code>&amp;amp;&amp;amp;&lt;/code>，and，当A和B同为true则为True，其他均为False&lt;/li>
&lt;li>&lt;code>||&lt;/code>，or，当A和B其中一个为True则整体为True&lt;/li>
&lt;li>还有第三个Logial Operators为&lt;code>!&lt;/code>，其的作用就是Reverse Bool Value&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">letter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Enter a letter: &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">letter&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">letter&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;A&amp;#39;&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">letter&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;You entered an upper case or lower &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">case&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="s">&amp;#34;);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;You did not enter an upper case or &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">lower&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="s">&amp;#34;);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>上面的程序，当输入为A或者a的时候，都会进入if，因为用的是&lt;code>||&lt;/code>，or判断符&lt;/li>
&lt;/ul>
&lt;h3 class="relative group">3.2.1.1 Lazy Evaluation
&lt;div id="3211-lazy-evaluation" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#3211-lazy-evaluation" aria-label="Anchor">#&lt;/a>
&lt;/span>
&lt;/h3>
&lt;ul>
&lt;li>假设执行了&lt;code>x % y &amp;lt; 10&lt;/code>的判断，一个问题可能出现在当y=0的时候，所以这就需要在整除之前做一步&lt;code>y!=0&lt;/code>的判断&lt;/li>
&lt;li>一种做法就是nested-if，嵌套if，这是一个非常lj的做法，虽然可读性高，但占用的时间和空间都是庞大的&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="err">条件&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 条件1满足时执行的代码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="err">条件&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 条件1和条件2同时满足时执行的代码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>另外一种做法就是通过Lazy Evaluation，其实就是使用&lt;code>&amp;amp;&amp;amp;&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// do something
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Lazy evaluation将多个判断结合为一个的办法，详细来说他会从左到右的顺序判断&lt;/li>
&lt;li>&lt;code>||&lt;/code>&lt;/li>
&lt;li>这个运算符先评估左侧的表达式（LHS，Left-Hand Side）。&lt;/li>
&lt;li>如果LHS为&lt;code>true&lt;/code>，那么整个条件表达式结果为&lt;code>true&lt;/code>，程序将不再继续评估右侧的表达式（RHS，Right-Hand Side）。&lt;/li>
&lt;li>如果LHS为&lt;code>false&lt;/code>，程序需要继续评估RHS来决定整个表达式的结果。&lt;/li>
&lt;li>&lt;code>&amp;amp;&amp;amp;&lt;/code>&lt;/li>
&lt;li>这个运算符也先评估LHS。&lt;/li>
&lt;li>如果LHS为&lt;code>false&lt;/code>，那么整个条件表达式结果为&lt;code>false&lt;/code>，程序将不再继续评估RHS。&lt;/li>
&lt;li>如果LHS为&lt;code>true&lt;/code>，程序需要继续评估RHS来决定整个表达式的结果。&lt;/li>
&lt;li>这种评估方式是一种效率优化手段，可以减少不必要的计算&lt;/li>
&lt;/ul>
&lt;h3 class="relative group">3.2.1.2 De Morgan&amp;rsquo;s Law
&lt;div id="3212-de-morgans-law" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#3212-de-morgans-law" aria-label="Anchor">#&lt;/a>
&lt;/span>
&lt;/h3>
&lt;ul>
&lt;li>当一个&lt;strong>Lazy Evaluation&lt;/strong>（注意仅是两个及以上的判断同时发生的情况下）判断的最外侧为一个Not，也就是&lt;code>!&lt;/code>的时候，整体的判断将会看上去十分复杂，这可以通过De Morgan&amp;rsquo;s Law化简&lt;/li>
&lt;li>具体来说&lt;code>!(A &amp;amp;&amp;amp; B)&lt;/code> is equivalent to &lt;code>!A || !B&lt;/code>，&lt;code>!(A || B)&lt;/code> is equivalent to &lt;code>!A &amp;amp;&amp;amp; !B&lt;/code>&lt;/li>
&lt;li>同时Relational Expression也可以变换，&amp;gt; 变成了&amp;lt;=，&amp;gt;= 变成 &amp;lt;，== 变成 !=&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure>
&lt;img
class="my-0 rounded-md"
loading="lazy"
srcset="
/docs/uoft/24/learning-programming-with-c/lpc3.decisionmakingstatements/LPC3.DecisionMakingStatements_hu14771444122089271576.png 330w,
/docs/uoft/24/learning-programming-with-c/lpc3.decisionmakingstatements/LPC3.DecisionMakingStatements_hu3266321974582059814.png 660w,
/docs/uoft/24/learning-programming-with-c/lpc3.decisionmakingstatements/LPC3.DecisionMakingStatements_hu9341054436462208839.png 1024w,
/docs/uoft/24/learning-programming-with-c/lpc3.decisionmakingstatements/LPC3.DecisionMakingStatements_hu13158954285452890454.png 2x"
src="https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc3.decisionmakingstatements/LPC3.DecisionMakingStatements_hu3266321974582059814.png"
alt="Img"
/>
&lt;/figure>
&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc3.decisionmakingstatements/feature.png"/></item><item><title>LPC 2. Data &amp; Operations</title><link>https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc2.dataoperations/</link><pubDate>Thu, 09 Jan 2025 00:00:00 +0000</pubDate><author>youremail@example.com (Buezwqwg)</author><guid>https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc2.dataoperations/</guid><description>&lt;blockquote>
&lt;p>Last Edit: 1/9/25&lt;/p>
&lt;/blockquote>
&lt;h1 class="relative group">2.1 Double data type for real numbers
&lt;div id="21-double-data-type-for-real-numbers" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#21-double-data-type-for-real-numbers" aria-label="Anchor">#&lt;/a>
&lt;/span>
&lt;/h1>
&lt;ul>
&lt;li>在程序中用分数代表数字&lt;/li>
&lt;/ul>
&lt;h2 class="relative group">2.1.1 Convert Inches to Centimeters
&lt;div id="211-convert-inches-to-centimeters" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#211-convert-inches-to-centimeters" aria-label="Anchor">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Description: This program convert inches to centimeters
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Declare variables
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">InchesToCm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">2.54&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">inputInches&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">outputCm&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Prompt user for input
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Enter the number of inches to convert to cm: &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%lf&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">inputInches&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Convert inches to centimeters
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">outputCm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">inputInches&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">InchesToCm&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Display output in 2 decimal places
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The number of centimeters is %.2lf&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">outputCm&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>const&lt;/code>是一个关键字，指示变量是常量。不能在整个代码中更改该变量&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">InchesToCm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">2.54&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">InchesToCm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">2.51&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>这样操作将会报错，因为&lt;code>InchesToCm&lt;/code>是一个不可以更改的Constant&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc2.dataoperations/feature.png"/></item><item><title>LPC 1. Intro to Programming Computers</title><link>https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc1.introtoprogrammingcomputers/</link><pubDate>Wed, 08 Jan 2025 00:00:00 +0000</pubDate><author>youremail@example.com (Buezwqwg)</author><guid>https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc1.introtoprogrammingcomputers/</guid><description>&lt;blockquote>
&lt;p>Last Edit: 1/8/25&lt;/p>
&lt;/blockquote>
&lt;h2 class="relative group">1.2 Binary representation in memory
&lt;div id="12-binary-representation-in-memory" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#12-binary-representation-in-memory" aria-label="Anchor">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;h3 class="relative group">Binary to Decimal Number 二进制转十进制
&lt;div id="binary-to-decimal-number-%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B6" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700"
style="text-decoration-line: none !important;" href="#binary-to-decimal-number-%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B6" aria-label="Anchor">#&lt;/a>
&lt;/span>
&lt;/h3>
&lt;ul>
&lt;li>Binary到Decimal Number的转换通过位数和值相乘得到&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure>
&lt;img
class="my-0 rounded-md"
loading="lazy"
srcset="
/docs/uoft/24/learning-programming-with-c/lpc1.introtoprogrammingcomputers/LPC1.IntrotoProgrammingComputers_hu4440032987239514809.png 330w,
/docs/uoft/24/learning-programming-with-c/lpc1.introtoprogrammingcomputers/LPC1.IntrotoProgrammingComputers_hu15081779412421026257.png 660w,
/docs/uoft/24/learning-programming-with-c/lpc1.introtoprogrammingcomputers/LPC1.IntrotoProgrammingComputers_hu17787250618502931940.png 1024w,
/docs/uoft/24/learning-programming-with-c/lpc1.introtoprogrammingcomputers/LPC1.IntrotoProgrammingComputers_hu12766134372818378964.png 2x"
src="https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc1.introtoprogrammingcomputers/LPC1.IntrotoProgrammingComputers_hu15081779412421026257.png"
alt="Img"
/>
&lt;/figure>
&lt;/p></description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://buezw.github.io/docs/uoft/24/learning-programming-with-c/lpc1.introtoprogrammingcomputers/feature.png"/></item></channel></rss>